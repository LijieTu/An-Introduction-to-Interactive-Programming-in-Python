# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, \
                          [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
    def draw_back(self, canvas, pos):
        card_loc = (CARD_BACK_CENTER[0],CARD_BACK_CENTER[1])
        canvas.draw_image(card_back, card_loc, CARD_BACK_SIZE, \
                          [pos[0] + CARD_BACK_CENTER[0], pos[1] + CARD_BACK_CENTER[1]], \
                          CARD_BACK_SIZE) 
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.hand=[]
    
    def __str__(self):
        # return a string representation of a hand
        ans="Hand contains "
        for idx in range(len(self.hand)):
             ans += str(self.hand[idx]) + " "
        return ans
            
    def add_card(self, card):
        # add a card object to a hand
        self.hand.append(card)
        
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        sum=0
        ace_counter= 0
        for item in self.hand:
            #print "item is",item
            #print "type",type(item)
            sum+=VALUES[item.get_rank()]
            #print sum
            if item.get_rank() == 'A':
                ace_counter+=1
        if ace_counter == 0:
            return sum
        else:
            if sum+10<=21:
                sum+=10
                return sum
            else:
                return sum
        
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        for idx in range(len(self.hand)):
            self.hand[idx].draw(canvas,pos)
            pos[0]+=CARD_SIZE[0]
            
    def draw_back(self, canvas, pos):
        self.hand[0].draw_back(canvas,pos) 
        #print "I draw back"
        for idx in range(1,len(self.hand)):
            pos[0]+=CARD_SIZE[0]
            self.hand[idx].draw(canvas,pos)
                    
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.deck=[]
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(suit,rank))
        
    def shuffle(self):
        # shuffle the deck 
        # use random.shuffle()
        random.shuffle(self.deck)
        
    def deal_card(self):
        # deal a card object from the deck
        return self.deck.pop(0)
        
        
    def __str__(self):
        # return a string representing the deck
        ans1="Deck contains "
        for idx in range(len(self.deck)):
             ans1 += str(self.deck[idx]) + " "
        return ans1


#define event handlers for buttons
def deal():
    global outcome, in_play,deck_shuffled,player_hand,dealer_hand,score
    
    if in_play == True:
        score-=1
        
    deck_shuffled=Deck()
    deck_shuffled.shuffle()
    player_hand=Hand()
    dealer_hand=Hand()
    
    for dummy in range(2):
        player_hand.add_card(deck_shuffled.deal_card())
        dealer_hand.add_card(deck_shuffled.deal_card())
    
    print "Dealer's",dealer_hand
    print "Player's",player_hand    
    print
    
    outcome="Hit or Stand?"
    in_play = True

def hit():    
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
    global player_hand,deck_shuffled,score,outcome,in_play
    value=player_hand.get_value()
    if value<=21:
        player_hand.add_card(deck_shuffled.deal_card())
    print "Player's",player_hand
    
    value=player_hand.get_value()
    if value>21:
        outcome= "You have busted! New deal?"
        in_play=False
        score-=1
    print outcome +"\n"
    
def stand():
       
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score
    
    global play_hand,dealer_hand,deck_shuffled,score,in_play,outcome
    
    while dealer_hand.get_value()<17:
        dealer_hand.add_card(deck_shuffled.deal_card())
    
    if dealer_hand.get_value()>21:
        print "Dealer's",dealer_hand
        outcome="Dealer busted! You win! New deal?"        
        score+=1
        in_play=False
    else:
        if dealer_hand.get_value()>=player_hand.get_value():
            print "Dealer's",dealer_hand
            outcome= "Dealer wins! New deal?"            
            score-=1
            in_play=False
        else:
            print "Dealer's",dealer_hand
            outcome= "You win! New deal?"   
            in_play=False
            score+=1
    print outcome +"\n"
    
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below   
    #card = Card("S", "A")
    #card.draw(canvas, [300, 300])
    
    global outcome,score,player_hand,dealer_hand,in_play
    player_hand.draw(canvas,[200,400])
    
    if in_play:
        dealer_hand.draw_back(canvas,[200,200])
    else:
        dealer_hand.draw(canvas,[200,200])
                
    canvas.draw_text('Blackjack', [30, 40], 30, 'Red')
    canvas.draw_text('Player',[100,450],30,'Red')
    canvas.draw_text('Dealer',[100,250],30,'Red')
    canvas.draw_text(outcome, [200, 40], 30, 'Red')
    canvas.draw_text('Score='+str(score), [200, 80], 30, 'Red')


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
